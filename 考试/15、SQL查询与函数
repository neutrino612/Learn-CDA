1、SQL语句的操作符

算术操作符：+  -  * /
比较操作符：=     >     <      <=      >=      !=      <>      !>      !<   9种


2、聚合类函数：针对一组数进行汇总求和的函数

AVG:按列计算平均值
SUM：按列计算值的总和
MAX：求一列中的最大值
MIN:   求一列中的最小值
COUNT:按列值计个数

3、SQL查询
SELECT语句语法
3-1  单表查询
SELECT   (目标列组)
    FROM <数据源>
    [WHERE <元组选择条件>]
    [GROUP BY <分列组>[HAVING <组选择条件>]]
    [DRDER BY <排序列1>  <排序要求1>  [,...n]];

示例：
select city_name ,avg(pm25),avg(pm10)
        from Monthly_indicator
        where pm25>50
        group by city_name,month_key having city_name<>'北京'
        order by avg(pm25) desc;降序排序   asc升序
        

思考诀窍：group by  按照和数据透视表理解，行标签选择  城市、月份，值为avg(pm25),avg(pm10)；聚合函数为值的汇总规则

3-2   多表查询
将两个以上的数据表通过关键字段连接在一起，并从不同表中取不同子弹进行查询的方法
关键字段：用来连接两表的内容信息能够匹配的上的字段
a.相连的两表中都需要有关键字段
b.关键字段中的记录信息能够匹配的上
c.最理想的连接状态是两表中的两个关键字段都是主键，而且两个主键的值能给个一一匹配的上

SELECT <select_list>FROM<表1>xx  join<表2> on 表1.key=表2.key 
a. xx代表链接的方向，可以是  inner   left   right    等关键字
b. 在连接语句前边的表是“左表”，在连接语句后边的表是“右表”

3-2-1  内连接查询  inner join
按照连接条件合并两个表， 返回满足条件的行     交集作为合并区域

select   <select_list> from A inner join  B  on  A.key=B.key、

3-2-2  左连接查询  left join
结果中除了包括满足连接条件的行外，还包括左表的所有行(匹配不到右表的部分值为null)

select   <select_list> from A left join  B  on  A.key=B.key；

3-2-3 右连接查询   right join
结果中除了包括满足连接条件的行外，还包括右表的所有行(匹配不到左表的部分值为null)
select <select_list>from A right join B  on A.key=B.key;

3-3  联合查询   就是power query中的纵向连接
union：用于合并两个或者多个select 语句的结果集，并消去表中任何重复行
例子：用union合并t1与t2表
select t1.* from t1
union 
select t2.* from t2;

union   all:用户合并两个或多个select语句的结果集，并保留重复行
例子：用union  all 合并t1与t2表
select t1.* from t1
union all
select t2.* from t2;

4、查询操作符与子查询
4-1、SQL语句的操作符
AND：用来联合多个条件进行查询，条件与条件间是   和   的意思
select * from fruits where s_id=101 and f_id='a1';


OR:用来联合多个条件进行查询，条件与条件之间是 或  的意思
select * from fruits where f_name='apple' or f_name='orange';

IN:判断某个字段的值是否在制定的集合中，如果在集合中则满足查询条件，如果不在则不满足查询条件

select * from fruits where f_name in ('apple','orange')
select * from fruits where f_name not in ('apple','orange')

BETWEEN:判断某个字段的值是否在指定的范围内，如果在则满足查询条件，如果不在则不满足查询条件
select * from fruits where f_price between 10   and  20;

LIKE：用来匹配字符串是否相等，如果字段的值与指定的字符串相匹配，则满足查询条件，如果与指定的字符串不匹配，则不满足查询条件
not like '字符串'   字符串可以是有%或者_的通配符
select * from fruits where f_id like 'b_'

IS NULL:用来判断字段的值是否为空值mull，如果字段的值为空值，则满足查询条件，如果字段的值是非空值，则不满足查询条件
select * from fruits where f_name is null;

DISTINCT:用来消除重复记录
select distinct s_id from fruits;

4-2子查询  
写在（）中，把内层查询结果当做外层查询参照的数据表来用

ANY：表示满足其中任意一个条件，使用ANY关键字的时候，只要满足内层查询语句返回的结果中的任何一个，就可以通过该条件来执行外层查询语句
select * from fruits where f_id =any(select f_id from fruits where f_price between 10 and 20)

ALL：表示满足所有条件，使用ALL时，只有满足内层查询语句返回的所有结果，才可以执行外层查询语句
select * from fruits where f_price >all(select f_price from fruits where f_price <=20)

EXISTS:表示存在，使用Exists 关键字时，内层查询语句不返回查询的记录，而是返回一个真假值，如果内层语句查询到满足条件的记录
就会返回真值，否则返回假值；当返回值是真，外层查询语句将进行查询，当返回值为假时，外层查询语句不进行查询或者查询不出任何记录
select * from fruits where exists (select * from fruits where f_price >30)

AS:可以将表或字段名重新命名为别的名称使用，只在查询中有效
select f.* from fruits as f;

LIMII:查询后只显示limit指定数字的行数结果
显示f_price 金额最大的前三名水果记录
select * from fruits order by f_price desc limit 3;


